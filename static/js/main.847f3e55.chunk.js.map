{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/AnswerOption.js","components/MultiChoice.js","components/TextInput.js","components/Result.js","components/PopOver.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","key","answers","type","goto","content","result","Question","props","react_default","a","createElement","className","AnswerOption","name","checked","answerType","answer","id","value","answerGoto","disabled","onChange","onAnswerSelected","htmlFor","answerContent","MultiChoice","react_transition_group","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","questionId","components_Question","answerOptions","map","console","log","undefined","v","components_AnswerOption","styles","theme","button","margin","spacing","unit","container","display","flexWrap","cssLabel","&$cssFocused","color","purple","cssFocused","cssUnderline","&:after","borderBottomColor","cssOutlinedInput","&$cssFocused $notchedOutline","borderColor","notchedOutline","bootstrapRoot","label + &","marginTop","bootstrapInput","borderRadius","backgroundColor","palette","common","white","border","fontSize","padding","transition","transitions","create","fontFamily","join","&:focus","boxShadow","bootstrapFormLabel","TextInput","TextField_default","InputLabelProps","root","focused","InputProps","multiline","rowsMax","label","variant","style","readOnly","marginLeft","width","onValueChange","defaultValue","Button_default","onClick","onAnswerInput","Result","PopOver","DialogTitle_default","title","DialogContent_default","DialogContentText_default","DialogActions_default","handleClose","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickOpen","setState","open","state","counter","text","handleAnswerSelected","bind","assertThisInitialized","handleAnswerInput","handleTextChange","AnswerOptions","str","String","match","event","_this2","setUserAnswer","currentTarget","checkReturn","setTimeout","setResults","setNextQuestion","document","getElementById","parseInt","length","components_TextInput","questionTotal","components_MultiChoice","Dialog_default","onClose","aria-labelledby","aria-describedby","children","components_PopOver","renderHintHelper","classes","renderResult","renderQuiz","justifyContent","renderHint","Component","withStyles","Boolean","window","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.847f3e55.chunk.js","sourcesContent":["var quizQuestions = [\r\n    {\r\n        question: \"What is the emergency?\",\r\n        key: 0,\r\n        answers: []\r\n    },\r\n    {\r\n        question: \"What Department?\",\r\n        key: 1,\r\n        answers: [{\r\n                type: \"foo\",\r\n                goto: 2,\r\n                content: \"1. Police\"\r\n            },\r\n            {\r\n                type: \"bar\",\r\n                goto: 2,\r\n                content: \"2. Fire\"\r\n            },\r\n            {\r\n                type: \"baz\",\r\n                goto: 3,\r\n                content: \"3. Both\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Where is the emergency?\",\r\n        key: 2,\r\n        answers: []\r\n    },\r\n    {\r\n        question: \"What is the patient's age/sex?\",\r\n        key: 3,\r\n        answers: []\r\n    },\r\n    {\r\n        question: \"Is the person conscious?\",\r\n        key: 4,\r\n        answers: [{\r\n                type: \"foo\",\r\n                goto: 5,\r\n                content: \"Yes\"\r\n            },\r\n            {\r\n                type: \"bar\",\r\n                goto: 6,\r\n                content: \"No\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"What is the telephone # you are calling from?\",\r\n        key: 5,\r\n        answers: []\r\n    },\r\n    {\r\n        question: \"Is the person breathing normally?\",\r\n        key: 6,\r\n        answers: [{\r\n            type: \"foo\",\r\n            result: \"9R1\",\r\n            content: \"Yes\"\r\n            },\r\n            {\r\n                type: \"bar\",\r\n                result: \"1M1\",\r\n                content: \"No\"\r\n            }\r\n        ]\r\n    },\r\n\r\n];\r\n\r\nexport default quizQuestions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Question(props) {\r\n  return <h2 className=\"question\">{props.content}</h2>;\r\n}\r\n\r\nQuestion.propTypes = {\r\n  content: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Question;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AnswerOption(props) {\r\n  return (\r\n    <li className=\"answerOption\">\r\n      <input\r\n        type=\"radio\"\r\n        className=\"radioCustomButton\"\r\n        name=\"radioGroup\"\r\n        checked={props.answerType === props.answer}\r\n        id={props.answerType}\r\n        value={props.answerGoto}\r\n        disabled={props.answer}\r\n        onChange={props.onAnswerSelected}\r\n      />\r\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\r\n        {props.answerContent}\r\n      </label>\r\n    </li>\r\n  );\r\n}\r\n\r\nAnswerOption.propTypes = {\r\n  answerType: PropTypes.string.isRequired,\r\n  answerGoto: PropTypes.string.isRequired,\r\n  answerContent: PropTypes.string.isRequired,\r\n  answer: PropTypes.string.isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AnswerOption;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport Question from '../components/Question';\r\nimport AnswerOption from '../components/AnswerOption';\r\n\r\nfunction MultiChoice(props) {\r\n  function renderAnswerOptions(key) {\r\n    console.log(key.result === undefined)\r\n    let v = 0\r\n    if (key.result === undefined) {\r\n      v = key.goto\r\n    } else {\r\n      v = key.result\r\n    }\r\n    return (\r\n      <AnswerOption\r\n        key={key.content}\r\n        answerContent={key.content}\r\n        answerGoto={v}\r\n        answerType={key.type}\r\n        answer={props.answer}\r\n        questionId={props.questionId}\r\n        onAnswerSelected={props.onAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <div key={props.questionId}>\r\n        {/* <QuestionCount counter={props.questionId} total={props.questionTotal} /> */}\r\n        <Question content={props.question} />\r\n        <ul className=\"answerOptions\">\r\n          {props.answerOptions.map(renderAnswerOptions)}\r\n        </ul>\r\n      </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nMultiChoice.propTypes = {\r\n  answer: PropTypes.string.isRequired,\r\n  answerOptions: PropTypes.array.isRequired,\r\n  question: PropTypes.string.isRequired,\r\n  questionId: PropTypes.number.isRequired,\r\n  questionTotal: PropTypes.number.isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MultiChoice;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport Question from './Question';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AnswerOption from '../components/AnswerOption';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  cssLabel: {\r\n    '&$cssFocused': {\r\n      color: purple[500],\r\n    },\r\n  },\r\n  cssFocused: {},\r\n  cssUnderline: {\r\n    '&:after': {\r\n      borderBottomColor: purple[500],\r\n    },\r\n  },\r\n  cssOutlinedInput: {\r\n    '&$cssFocused $notchedOutline': {\r\n      borderColor: purple[500],\r\n    },\r\n  },\r\n  notchedOutline: {},\r\n  bootstrapRoot: {\r\n    'label + &': {\r\n      marginTop: theme.spacing.unit * 3,\r\n    },\r\n  },\r\n  bootstrapInput: {\r\n    borderRadius: 4,\r\n    backgroundColor: theme.palette.common.white,\r\n    border: '1px solid #ced4da',\r\n    fontSize: 16,\r\n    padding: '10px 12px',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    // Use the system font instead of the default Roboto font.\r\n    fontFamily: [\r\n      '-apple-system',\r\n      'BlinkMacSystemFont',\r\n      '\"Segoe UI\"',\r\n      'Roboto',\r\n      '\"Helvetica Neue\"',\r\n      'Arial',\r\n      'sans-serif',\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(','),\r\n    '&:focus': {\r\n      borderColor: '#80bdff',\r\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n    },\r\n  },\r\n  bootstrapFormLabel: {\r\n    fontSize: 18,\r\n  },\r\n});\r\n\r\nfunction TextInput(props) {\r\n      // return (\r\n        // <AnswerOption\r\n  //         key={key.content}\r\n  //         answerContent={key.content}\r\n  //         answerType={key.type}\r\n  //         answer={props.answer}\r\n  //         questionId={props.questionId}\r\n          // onAnswerSelected={props.onAnswerSelected}\r\n        // />\r\n      // );\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <div>\r\n        {/* <QuestionCount counter={props.questionId} total={props.questionTotal} /> */}\r\n        <Question content={props.question} />\r\n        {/* <ul className=\"answerOptions\">\r\n          {props.answerOptions.map(renderAnswerOptions)}\r\n        </ul> */}\r\n        <form>\r\n         <TextField\r\n            className={styles.margin}\r\n            InputLabelProps={{\r\n              styles: {\r\n                root: styles.cssLabel,\r\n                focused: styles.cssFocused,\r\n              },\r\n            }}\r\n            InputProps={{\r\n              styles: {\r\n                root: styles.cssOutlinedInput,\r\n                focused: styles.cssFocused,\r\n                notchedOutline: styles.notchedOutline,\r\n              },\r\n            }}\r\n            multiline\r\n            rowsMax=\"4\"\r\n            label=\"txt\"\r\n            variant=\"outlined\"\r\n            style={\r\n              {\r\n                readOnly: true,\r\n                marginLeft: '2.5rem',\r\n                width: 400,\r\n              }\r\n            }\r\n            onChange={props.onValueChange}\r\n            id=\"txt\"\r\n            defaultValue=\"\"\r\n          />\r\n          <br />\r\n          <Button variant=\"contained\" className={styles.button} onClick={props.onAnswerInput}\r\n          style={\r\n            {\r\n              margin: 20,\r\n              marginLeft: '2.5rem',\r\n            }\r\n          }>\r\n            Submit\r\n          </Button>\r\n          </form>\r\n      </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  answer: PropTypes.string.isRequired,\r\n  answerOptions: PropTypes.array.isRequired,\r\n  question: PropTypes.string.isRequired,\r\n  questionId: PropTypes.number.isRequired,\r\n  questionTotal: PropTypes.number.isRequired,\r\n  onAnswerInput: PropTypes.func.isRequired,\r\n  onValueChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TextInput;\r\n//   function renderAnswerOptions(key) {\r\n//     return (\r\n//       <AnswerOption\r\n//         key={key.content}\r\n//         answerContent={key.content}\r\n//         answerType={key.type}\r\n//         answer={props.answer}\r\n//         questionId={props.questionId}\r\n//         onAnswerSelected={props.onAnswerSelected}\r\n//       />\r\n//     );\r\n//   }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\nfunction Result(props) {\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container result\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <h2>\r\n        The code is  <strong>{props.quizResult}</strong>!\r\n      </h2>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nResult.propTypes = {\r\n  quizResult: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction PopOver(props) {\r\n  return (\r\n    <div>\r\n        <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {props.content}\r\n        </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={props.handleClose} color=\"primary\">\r\n            Got it!\r\n            </Button>\r\n        </DialogActions>\r\n    </div>\r\n  );\r\n}\r\n\r\nPopOver.propTypes = {\r\n  content: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  handleClose: PropTypes.func.isRequired\r\n};\r\n\r\nexport default PopOver\r\n","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport MultiChoice from './components/MultiChoice';\nimport TextInput from './components/TextInput'\nimport Result from './components/Result';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport PopOver from './components/PopOver';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  margin: {\n    margin: theme.spacing.unit,\n  },\n  cssLabel: {\n    '&$cssFocused': {\n      color: purple[500],\n    },\n  },\n  cssFocused: {},\n  cssUnderline: {\n    '&:after': {\n      borderBottomColor: purple[500],\n    },\n  },\n  cssOutlinedInput: {\n    '&$cssFocused $notchedOutline': {\n      borderColor: purple[500],\n    },\n  },\n  notchedOutline: {},\n  bootstrapRoot: {\n    'label + &': {\n      marginTop: theme.spacing.unit * 3,\n    },\n  },\n  bootstrapInput: {\n    borderRadius: 4,\n    backgroundColor: theme.palette.common.white,\n    border: '1px solid #ced4da',\n    fontSize: 16,\n    padding: '10px 12px',\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    '&:focus': {\n      borderColor: '#80bdff',\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n    },\n  },\n  bootstrapFormLabel: {\n    fontSize: 18,\n  },\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      result: '',\n      goto: '',\n      text: '',\n      open: false,\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    this.handleAnswerInput = this.handleAnswerInput.bind(this)\n    this.handleTextChange = this.handleTextChange.bind(this)\n  }\n\n  componentWillMount() {\n    const AnswerOptions = quizQuestions.map(question =>\n      question.answers\n    );\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: AnswerOptions[0],\n    });\n    // if (document.getElementById('txt') !== undefined) {\n      //  document.getElementById('txt').value = \"\"\n    // }\n  }\n\n  checkReturn(str) {\n    return String(str).match(/[a-z]/i)\n  }\n\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleAnswerSelected(event) {\n    // console.log(event.currentTarget.value)\n    this.setUserAnswer(event.currentTarget.value);\n    console.log(\"type: \" + typeof this.state.goto)\n    console.log(\"value1 \" + this.state.goto)\n    if (this.checkReturn(event.currentTarget.value)) {\n      console.log(\"type2 \" + typeof this.state.goto)\n      setTimeout(() => this.setResults(), 300);\n    } else {\n      console.log(\"type3 \" + typeof this.state.goto)\n      console.log(\"value: \" + this.state.goto)\n      setTimeout(() => this.setNextQuestion(), 300);\n    }\n  }\n\n  handleTextChange(event) {\n    this.setState({\n      text: event.currentTarget.value\n    });\n  }\n\n\n  handleAnswerInput(event) {\n\n    if (this.state.question.match(/What is the emergency/i)) {\n      document.getElementById('report').value = this.state.text\n      document.getElementById('txt').value = \"\"\n    }\n    if (this.state.question.match(/telephone/i)) {\n      document.getElementById('phone').value = this.state.text\n      document.getElementById('txt').value = \"\"\n    }\n    if (this.state.question.match(/where/i)) {\n      document.getElementById('location').value = this.state.text\n      document.getElementById('txt').value = \"\"\n    }\n\n    if (this.state.question.match(/sex/i)) {\n      document.getElementById('sex').value = this.state.text\n      document.getElementById('txt').value = \"\"\n    }\n\n    this.setNextQuestion()\n  }\n\n  setUserAnswer(answer) {\n    this.setState({\n      goto: answer\n    });\n  }\n\n  setNextQuestion() {\n    let counter = parseInt(this.state.counter) + 1;\n    console.log(\"goto1: \" + this.state.goto)\n    console.log(\"counter1: \" + counter)\n    if (this.state.goto.length !== 0) {\n      counter = parseInt(this.state.goto);\n    }\n    console.log(\"goto2: \" + this.state.goto)\n    console.log(\"counter2: \" + counter)\n    const questionId = this.state.questionId + 1;\n\n    console.log(\"counter3: \" + counter)\n    console.log(\"goto3: \" + this.state.goto)\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: '',\n      goto: '',\n    });\n  }\n\n  setResults() {\n    this.setState({ result: this.state.goto })\n  }\n\n  renderQuiz() {\n    if (this.state.answerOptions.length === 0) {\n      return (\n        <TextInput\n          answer={this.state.answer}\n          answerOptions={this.state.answerOptions}\n          questionId={this.state.questionId}\n          question={this.state.question}\n          questionTotal={quizQuestions.length}\n          onAnswerInput={this.handleAnswerInput}\n          onValueChange={this.handleTextChange}\n        />\n      );\n    } else {\n      return (\n        <MultiChoice\n          answer={this.state.answer}\n          answerOptions={this.state.answerOptions}\n          questionId={this.state.questionId}\n          question={this.state.question}\n          questionTotal={quizQuestions.length}\n          onAnswerSelected={this.handleAnswerSelected}\n        />\n      );\n    }\n  }\n\n  renderResult() {\n    document.getElementById('code').value = this.state.goto\n  }\n\n  renderHintHelper(content, title) {\n    return <Dialog\n      open={this.state.open}\n      onClose={this.handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      children={<PopOver content={content} title={title} handleClose={this.handleClose}/>}\n    >\n    </Dialog>\n  }\n\n  renderHint() {\n    if (this.state.question.match(/What is the emergency/i)) {\n      return this.renderHintHelper(\"hello\", \"world\");\n    }\n\n    if (this.state.question.match(/department/i)) {\n      return this.renderHintHelper(\"hello1\", \"world1\");\n    }\n\n    if (this.state.question.match(/where/i)) {\n      return this.renderHintHelper(\"hello2\", \"world2\");\n    }\n\n    if (this.state.question.match(/sex/i)) {\n      return this.renderHintHelper(\"hello3\", \"world3\");\n    }\n\n    if (this.state.question.match(/conscious/i)) {\n      return this.renderHintHelper(\"hello4\", \"world4\");\n    }\n    if (this.state.question.match(/telephone/i)) {\n      return this.renderHintHelper(\"hello5\", \"world5\");\n    }\n\n    return this.renderHintHelper(\"Sorry\", \"No hint here\");\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <h1> F.R.I.C </h1>\n          <TextField\n            className={classes.margin}\n            InputLabelProps={{\n              classes: {\n                root: classes.cssLabel,\n                focused: classes.cssFocused,\n              },\n            }}\n            InputProps={{\n              classes: {\n                root: classes.cssOutlinedInput,\n                focused: classes.cssFocused,\n                notchedOutline: classes.notchedOutline,\n              },\n              readOnly: true\n            }}\n            label=\"Phone\"\n            defaultValue=\"Phone Number\"\n            variant=\"outlined\"\n            style={\n              {\n                width: 190\n              }\n            }\n            id=\"phone\"\n          />\n          <TextField\n            className={classes.margin}\n            InputLabelProps={{\n              classes: {\n                root: classes.cssLabel,\n                focused: classes.cssFocused,\n              },\n            }}\n            InputProps={{\n              classes: {\n                root: classes.cssOutlinedInput,\n                focused: classes.cssFocused,\n                notchedOutline: classes.notchedOutline,\n              },\n              readOnly: true\n            }}\n            label=\"Caller\"\n            defaultValue=\"Caller Name\"\n            variant=\"outlined\"\n            style={\n              {\n                width: 190\n              }\n            }\n            id=\"caller\"\n          />\n          <TextField\n            className={classes.margin}\n            InputLabelProps={{\n              classes: {\n                root: classes.cssLabel,\n                focused: classes.cssFocused,\n              },\n              readOnly: true\n            }}\n            InputProps={{\n              classes: {\n                root: classes.cssOutlinedInput,\n                focused: classes.cssFocused,\n                notchedOutline: classes.notchedOutline,\n              },\n              readOnly: true\n            }}\n            rowsMax=\"4\"\n            label=\"Sex\"\n            defaultValue=\"Sex\"\n            variant=\"outlined\"\n            style={\n              {\n                width: 190\n              }\n            }\n            id=\"sex\"\n          />\n          <br />\n          <TextField\n            className={classes.margin}\n            InputLabelProps={{\n              classes: {\n                root: classes.cssLabel,\n                focused: classes.cssFocused,\n              },\n              readOnly: true\n            }}\n            InputProps={{\n              classes: {\n                root: classes.cssOutlinedInput,\n                focused: classes.cssFocused,\n                notchedOutline: classes.notchedOutline,\n              },\n              readOnly: true\n            }}\n            multiline\n            rowsMax=\"4\"\n            label=\"Location\"\n            defaultValue=\"Emergency Location\"\n            variant=\"outlined\"\n            style={\n              {\n                width: 600\n              }\n            }\n            id=\"location\"\n          />\n          <br />\n          <TextField\n            className={classes.margin}\n            InputLabelProps={{\n              classes: {\n                root: classes.cssLabel,\n                focused: classes.cssFocused,\n              },\n            }}\n            InputProps={{\n              classes: {\n                root: classes.cssOutlinedInput,\n                focused: classes.cssFocused,\n                notchedOutline: classes.notchedOutline,\n              },\n              readOnly: true\n            }}\n            label=\"Report Incident\"\n            defaultValue=\"Details\"\n            variant=\"outlined\"\n            style={\n              {\n                width: 600\n              }\n            }\n            // fullWidth\n            id=\"report\"\n          />\n          <br />\n          <TextField\n            className={classes.margin}\n            InputLabelProps={{\n              classes: {\n                root: classes.cssLabel,\n                focused: classes.cssFocused,\n              },\n              readOnly: true\n            }}\n            InputProps={{\n              classes: {\n                root: classes.cssOutlinedInput,\n                focused: classes.cssFocused,\n                notchedOutline: classes.notchedOutline,\n              },\n              readOnly: true\n            }}\n            multiline\n            rowsMax=\"4\"\n            label=\"Code\"\n            defaultValue=\"Code\"\n            variant=\"outlined\"\n            style={\n              {\n                width: 300,\n              }\n            }\n            id=\"code\"\n          />\n       </div>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n        <div style = {{\n          display: \"flex\",\n          justifyContent: \"flex-end\"\n        }\n        }>\n          <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClickOpen} style={\n            {\n              margin: 20,\n            }\n          }>\n            About This Question\n        </Button>\n        {this.renderHint()}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}